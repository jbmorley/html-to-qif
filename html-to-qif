#!/usr/bin/env python

import argparse
import datetime
import lxml.etree
import lxml.html
import os.path
import datetime


def parse_html(path, year=None):
    with open(path, 'r') as f:
        data = f.read()
        records = []
        tree = lxml.html.fromstring(data)
        transactions = tree.xpath("//table[@summary='This table contains a statement of your account']/tbody/tr")[1:-1]
        for transaction in transactions:
            columns = map(lambda x: x.xpath("string()").strip(), transaction.iter('td'))
            date = columns[0]
            description = columns[2]
            value = None
            if (columns[3] != ""):
                value = float(columns[3]) * -1
            elif (columns[4] != ""):
                value = float(columns[4])
            else:
                exit("Unable to find value for transaciton")
            record = Record()
            record.date = datetime.datetime.strptime("%s %s" % (date, year), "%d %b %Y")
            record.value = value
            record.description = description
            records.append(record)
        return records


class Record(object):

    def __init__(self):
        self.date = None
        self.value = 0
        self.description = ""

    def __str__(self):
        date = self.date.strftime("%d/%m/%Y")
        return "D%s\nT%.02f\nP%s\n^\n" % (date, self.value, self.description)


def write_qif(path, records):
    with open(path, 'w') as f:
        f.write("!Type:Oth L\n")
        for record in records:
            f.write("%s" % record)
        f.write("\n")


def main():
    parser = argparse.ArgumentParser(description="Convert an HSBC HTML statement to Quicken QIF file format")
    parser.add_argument("input", help="input HTML statement")
    parser.add_argument("output", help="output QIF file")
    parser.add_argument("--year", "-y", help="statement year")
    options = parser.parse_args()

    input = os.path.abspath(options.input)
    output = os.path.abspath(options.output)

    # Extract the records from the HTML.
    records = parse_html(input, year=options.year)

    # Write the QIF file.
    write_qif(output, records)


if __name__ == '__main__':
    main()
