#!/usr/bin/env python

import argparse
import datetime
import datetime
import logging
import lxml.etree
import lxml.html
import os.path
import sys

import inseven.sense
import inseven.finance


verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


def parse_html(path, year=None):
    with open(path, 'r') as f:
        data = f.read()
        records = []
        tree = lxml.html.fromstring(data)
        transactions = tree.xpath("//table[@summary='This table contains a statement of your account']/tbody/tr")[1:-1]
        for transaction in transactions:
            columns = map(lambda x: x.xpath("string()").strip(), transaction.iter('td'))
            date = columns[0]
            description = columns[2]
            value = None
            if (columns[3] != ""):
                value = float(columns[3]) * -1
            elif (columns[4] != ""):
                value = float(columns[4])
            else:
                exit("Unable to find value for transaciton")
            record = inseven.finance.Record()
            record.date = datetime.datetime.strptime("%s %s" % (date, year), "%d %b %Y")
            record.value = value
            record.description = description
            records.append(record)
        return records


def parse_pdf(path, year=None):
    return inseven.sense.parse_pdf(path)


def write_csv(path, records):
    """
    Write a collection of records in CSV format.
    """
    with open(path, 'w') as fh:
        for record in records:
            date = record.date.strftime("%d/%m/%Y")
            fh.write("%s,%s,%s\n" % (record.date, record.description.replace(",", ""), record.value))


def write_qif(path, records):
    """
    Write a collection of records in QIF format.
    """
    with open(path, 'w') as f:
        f.write("!Type:Oth L\n")
        for record in records:
            f.write("%s" % record)
        f.write("\n")


FORMATS = {"html": parse_html,
           "pdf": parse_pdf}
OUTPUT_FORMATS = {"qif": write_qif,
                  "csv": write_csv}


def main():
    parser = argparse.ArgumentParser(description="Convert an HSBC UK statement to different file formats.")
    parser.add_argument("input", help="input HTML statement")
    parser.add_argument("output", help="output QIF file")
    parser.add_argument("--year", "-y", help="statement year")
    parser.add_argument("--format", "-f", help="statement format", choices=FORMATS.keys())
    parser.add_argument("--output-format", help="output format", choices=OUTPUT_FORMATS.keys())
    parser.add_argument('--verbose', '-v', action='store_true', default=False, help="Show verbose output.")
    options = parser.parse_args()

    input = os.path.abspath(options.input)
    output = os.path.abspath(options.output)

    input_format = options.format
    if not input_format:
        input_format = os.path.splitext(input)[1][1:]
        if input_format not in FORMATS:
            exit("'%s' is not a supported input format." % input_format)

    output_format = options.output_format
    if not output_format:
        output_format = os.path.splitext(output)[1][1:]
        if output_format not in OUTPUT_FORMATS:
            exit("'%s' is not a supported output format." % output_format)
    
    records = FORMATS[input_format](input, year=options.year)
    OUTPUT_FORMATS[output_format](output, records)


if __name__ == '__main__':
    main()
